/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/auth-bundle-v5.js":
/*!*******************************!*\
  !*** ./src/auth-bundle-v5.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n// Niko Auth Core - Professional Authentication System v5.0.0\n// Enterprise-grade security with httpOnly cookies and automatic token management\n(function(window) {\n  'use strict';\n\n  const CONFIG = {\n    SUPABASE_URL: 'https://bzjoxjqfpmjhbfijthpp.supabase.co',\n    SUPABASE_ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ6am94anFmcG1qaGJmaWp0aHBwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjIyMzksImV4cCI6MjA3MTMzODIzOX0.sL9omeLIgpgqYjTJM6SGQPSvUvm5z-Yr9rOzkOi2mJk',\n    ROUTES: {\n      CUSTOMER_ONBOARDING: '/dev/app/customer/onboarding',\n      RETAILER_ONBOARDING: '/dev/app/retailer/onboarding',\n      CUSTOMER_DASHBOARD: '/dev/app/customer/dashboard',\n      RETAILER_DASHBOARD: '/dev/app/retailer/dashboard',\n      LOGIN_PAGE: '/dev/app/auth/log-in'\n    }\n  };\n\n  // ============================================================================\n  // PROFESSIONAL COOKIE STORAGE IMPLEMENTATION\n  // ============================================================================\n  const cookieStorage = {\n    getItem: (key) => {\n      const value = `; ${document.cookie}`;\n      const parts = value.split(`; ${key}=`);\n      return parts.length === 2 ? decodeURIComponent(parts.pop().split(';').shift()) : null;\n    },\n    setItem: (key, value) => {\n      const maxAge = 7 * 24 * 60 * 60; // 7 days\n      document.cookie = `${key}=${encodeURIComponent(value)}; max-age=${maxAge}; path=/; secure; samesite=lax`;\n    },\n    removeItem: (key) => {\n      document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; samesite=lax`;\n    }\n  };\n\n  // ============================================================================\n  // MAIN AUTHENTICATION SYSTEM\n  // ============================================================================\n  class NikoAuthCore {\n    constructor() {\n      console.log('🚀 NikoAuthCore constructor called');\n      this.supabase = null;\n      this.initialized = false;\n      this.authStateListeners = [];\n      console.log('📋 Initial state set, calling init()');\n      this.init();\n    }\n\n    async init() {\n      console.log('🔧 Loading Niko Auth Core v5.0.0 (Professional)');\n      console.log('📍 Current URL:', window.location.href);\n      console.log('🍪 Document cookies available:', document.cookie ? 'YES' : 'NO');\n      \n      if (typeof supabase === 'undefined') {\n        console.log('📦 Supabase not found, loading from CDN...');\n        await this.loadSupabase();\n        console.log('✅ Supabase loaded successfully');\n      } else {\n        console.log('✅ Supabase already available');\n      }\n      \n      console.log('⚙️ Initializing Supabase client with professional config...');\n      \n      // Initialize Supabase with professional configuration\n      this.supabase = supabase.createClient(CONFIG.SUPABASE_URL, CONFIG.SUPABASE_ANON_KEY, {\n        auth: {\n          storage: cookieStorage,\n          autoRefreshToken: true,\n          persistSession: true,\n          detectSessionInUrl: true,\n          flowType: 'pkce' // PKCE for enhanced security\n        }\n      });\n      \n      console.log('✅ Supabase client created with config:', {\n        storage: 'cookieStorage',\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n        flowType: 'pkce'\n      });\n      \n      this.initialized = true;\n      console.log('🎉 Niko Auth Core v5.0.0 initialized with professional security');\n      console.log('🔗 Available on window.NikoAuthCore and window.NikoAuth');\n      \n      // Setup auth state monitoring\n      console.log('👂 Setting up auth state listener...');\n      this.setupAuthStateListener();\n      \n      console.log('🚪 Setting up logout handlers...');\n      this.setupLogoutHandlers();\n      \n      // Check initial auth state\n      console.log('🔍 Checking initial auth state...');\n      await this.checkAuthState();\n      \n      console.log('✨ Initialization complete!');\n    }\n\n    loadSupabase() {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    }\n\n    // ============================================================================\n    // PROFESSIONAL AUTH STATE MANAGEMENT\n    // ============================================================================\n    setupAuthStateListener() {\n      this.supabase.auth.onAuthStateChange((event, session) => {\n        console.log('Auth state change:', event);\n        \n        switch (event) {\n          case 'SIGNED_IN':\n            console.log('User signed in:', session?.user?.email);\n            this.handleAuthenticatedUser(session.user);\n            break;\n            \n          case 'SIGNED_OUT':\n            console.log('User signed out');\n            this.handleSignedOutUser();\n            break;\n            \n          case 'TOKEN_REFRESHED':\n            console.log('Token refreshed automatically');\n            // Supabase handles this transparently\n            break;\n            \n          case 'USER_UPDATED':\n            console.log('User updated');\n            break;\n        }\n        \n        // Notify custom listeners\n        this.authStateListeners.forEach(listener => {\n          try {\n            listener(event, session);\n          } catch (error) {\n            console.error('Auth state listener error:', error);\n          }\n        });\n      });\n    }\n\n    onAuthStateChange(callback) {\n      this.authStateListeners.push(callback);\n      // Return unsubscribe function\n      return () => {\n        const index = this.authStateListeners.indexOf(callback);\n        if (index > -1) {\n          this.authStateListeners.splice(index, 1);\n        }\n      };\n    }\n\n    // ============================================================================\n    // USER MANAGEMENT\n    // ============================================================================\n    handleAuthenticatedUser(user) {\n      if (!user) return;\n      \n      const userType = user.user_metadata?.user_type || user.user_metadata?.role || 'customer';\n      const userName = user.user_metadata?.name || user.email?.split('@')[0] || 'User';\n\n      // Set body attributes for styling\n      document.body.setAttribute('data-user-authenticated', 'true');\n      document.body.setAttribute('data-user-type', userType);\n\n      // Populate user data in DOM\n      this.populateUserData(user, userName, userType);\n      \n      // Show authenticated content\n      this.showAuthenticatedContent();\n      \n      // Apply role-based visibility\n      this.applyRoleBasedVisibility(userType);\n\n      // Fire custom event\n      window.dispatchEvent(new CustomEvent('nikoAuthReady', {\n        detail: { user, userType, authenticated: true }\n      }));\n\n      console.log('User interface updated for:', userName);\n    }\n\n    handleSignedOutUser() {\n      // Remove body attributes\n      document.body.removeAttribute('data-user-authenticated');\n      document.body.removeAttribute('data-user-type');\n\n      // Hide authenticated content\n      document.querySelectorAll('[niko-data=\"auth-required\"]').forEach(el => {\n        el.style.visibility = 'hidden';\n        el.style.opacity = '0';\n      });\n\n      // Fire custom event\n      window.dispatchEvent(new CustomEvent('nikoAuthSignedOut', {\n        detail: { authenticated: false }\n      }));\n\n      // Redirect if on protected page\n      if (this.isProtectedPage()) {\n        this.redirectToLogin();\n      }\n    }\n\n    populateUserData(user, userName, userType) {\n      // Update user name elements\n      document.querySelectorAll('[niko-data=\"user-name\"]').forEach(el => {\n        el.textContent = userName;\n      });\n\n      // Update email elements  \n      document.querySelectorAll('[niko-data=\"user-email\"]').forEach(el => {\n        el.textContent = user.email;\n      });\n\n      // Update role elements\n      document.querySelectorAll('[niko-data=\"user-role\"]').forEach(el => {\n        el.textContent = userType;\n      });\n\n      // Legacy selectors for backward compatibility\n      const userSelectors = {\n        name: ['[data-user=\"name\"]', '.user-name', '#user-name'],\n        email: ['[data-user=\"email\"]', '.user-email', '#user-email'],\n        role: ['[data-user=\"role\"]', '.user-role', '#user-role']\n      };\n\n      userSelectors.name.forEach(selector => {\n        document.querySelectorAll(selector).forEach(el => el.textContent = userName);\n      });\n      \n      userSelectors.email.forEach(selector => {\n        document.querySelectorAll(selector).forEach(el => el.textContent = user.email);\n      });\n      \n      userSelectors.role.forEach(selector => {\n        document.querySelectorAll(selector).forEach(el => el.textContent = userType);\n      });\n    }\n\n    showAuthenticatedContent() {\n      document.querySelectorAll('[niko-data=\"auth-required\"]').forEach(el => {\n        el.style.visibility = 'visible';\n        el.style.opacity = '1';\n      });\n\n      // Special handling if body itself has auth-required\n      if (document.body && document.body.hasAttribute('niko-data') && \n          document.body.getAttribute('niko-data') === 'auth-required') {\n        document.body.style.visibility = 'visible';\n        document.body.style.opacity = '1';\n      }\n    }\n\n    applyRoleBasedVisibility(userType) {\n      document.querySelectorAll('[niko-role]').forEach(element => {\n        const allowedRoles = element.getAttribute('niko-role').split(',').map(r => r.trim());\n        \n        if (!allowedRoles.includes(userType)) {\n          element.remove();\n        }\n      });\n    }\n\n    // ============================================================================\n    // AUTHENTICATION METHODS\n    // ============================================================================\n    async register(email, password, name, userType) {\n      console.log('📝 REGISTER METHOD CALLED');\n      console.log('👤 Registering user:', { email, userType, name });\n      console.log('🔧 Initialized status:', this.initialized);\n      \n      if (!this.initialized) {\n        console.error('❌ Authentication system not initialized');\n        throw new Error('Authentication system not initialized');\n      }\n\n      try {\n        const redirectUrl = userType.toLowerCase() === 'retailer'\n          ? window.location.origin + CONFIG.ROUTES.RETAILER_ONBOARDING\n          : window.location.origin + CONFIG.ROUTES.CUSTOMER_ONBOARDING;\n\n        console.log('🔄 Redirect URL:', redirectUrl);\n        console.log('📧 Calling Supabase auth.signUp...');\n\n        const { data, error } = await this.supabase.auth.signUp({\n          email: email,\n          password: password,\n          options: {\n            data: {\n              name: name,\n              user_type: userType.toLowerCase(),\n              role: userType.toLowerCase()\n            },\n            emailRedirectTo: redirectUrl\n          }\n        });\n\n        if (error) {\n          console.error('❌ Registration error:', error);\n          return { success: false, error: error.message };\n        }\n\n        console.log('✅ Registration successful:', data.user?.email);\n        console.log('👤 User data:', data.user);\n        \n        // Create Webflow record\n        console.log('📊 Creating Webflow record...');\n        await this.createWebflowRecord(data.user.id, email, name, userType);\n        \n        console.log('🎉 Registration complete!');\n        return { success: true, user: data.user };\n\n      } catch (error) {\n        console.error('💥 Registration failed with error:', error);\n        return { success: false, error: error.message };\n      }\n    }\n\n    async login(email, password) {\n      console.log('Logging in user:', { email });\n      \n      if (!this.initialized) {\n        throw new Error('Authentication system not initialized');\n      }\n\n      try {\n        const { data, error } = await this.supabase.auth.signInWithPassword({\n          email: email,\n          password: password\n        });\n\n        if (error) {\n          console.error('Login error:', error);\n          return { success: false, error: error.message };\n        }\n\n        console.log('Login successful:', data.user?.email);\n        \n        // Redirect will be handled by auth state change listener\n        if (data.session && data.user) {\n          const userType = data.user.user_metadata?.user_type || data.user.user_metadata?.role || 'customer';\n          const dashboardUrl = userType === 'retailer' \n            ? CONFIG.ROUTES.RETAILER_DASHBOARD \n            : CONFIG.ROUTES.CUSTOMER_DASHBOARD;\n          \n          // Small delay to ensure auth state is processed\n          setTimeout(() => {\n            window.location.href = window.location.origin + dashboardUrl;\n          }, 100);\n        }\n\n        return { success: true, user: data.user };\n\n      } catch (error) {\n        console.error('Login failed:', error);\n        return { success: false, error: error.message };\n      }\n    }\n\n    async logout() {\n      console.log('Logging out user...');\n      \n      if (!this.initialized) {\n        throw new Error('Authentication system not initialized');\n      }\n\n      try {\n        const { error } = await this.supabase.auth.signOut();\n\n        if (error) {\n          console.error('Logout error:', error);\n          return { success: false, error: error.message };\n        }\n\n        // Clear additional storage (Supabase cookies are handled automatically)\n        localStorage.clear();\n        sessionStorage.clear();\n\n        console.log('Logout successful');\n        return { success: true };\n\n      } catch (error) {\n        console.error('Logout failed:', error);\n        return { success: false, error: error.message };\n      }\n    }\n\n    // ============================================================================\n    // UTILITY METHODS\n    // ============================================================================\n    async getCurrentUser() {\n      if (!this.initialized) return null;\n      \n      try {\n        const { data: { user }, error } = await this.supabase.auth.getUser();\n        if (error) throw error;\n        return user;\n      } catch (error) {\n        console.error('Get user failed:', error);\n        return null;\n      }\n    }\n\n    async isAuthenticated() {\n      const user = await this.getCurrentUser();\n      return !!user;\n    }\n\n    async checkAuthState() {\n      const user = await this.getCurrentUser();\n      if (user) {\n        console.log('User authenticated:', user.email);\n        this.handleAuthenticatedUser(user);\n      } else if (this.isProtectedPage()) {\n        console.log('No user found on protected page, redirecting...');\n        this.redirectToLogin();\n      }\n    }\n\n    async createWebflowRecord(userId, email, name, userType) {\n      try {\n        const { data, error } = await this.supabase.functions.invoke('create-webflow-user', {\n          body: {\n            user_id: userId,\n            email: email,\n            name: name,\n            user_type: userType\n          }\n        });\n\n        if (error) {\n          console.warn('Webflow integration error (user still created in Supabase):', error);\n        } else {\n          console.log('Webflow CMS record created');\n        }\n      } catch (error) {\n        console.warn('Edge function error:', error);\n      }\n    }\n\n    setupLogoutHandlers() {\n      if (typeof document === 'undefined') return;\n\n      const logoutSelectors = [\n        '[niko-data=\"logout\"]',\n        '[data-logout]',\n        '.logout-btn',\n        '.logout-button',\n        'a[href*=\"logout\"]',\n        'button[onclick*=\"logout\"]'\n      ];\n\n      const logoutElements = [];\n      logoutSelectors.forEach(selector => {\n        document.querySelectorAll(selector).forEach(element => {\n          if (!logoutElements.includes(element)) {\n            logoutElements.push(element);\n          }\n        });\n      });\n\n      console.log(`Found ${logoutElements.length} logout elements`);\n\n      logoutElements.forEach(element => {\n        const newElement = element.cloneNode(true);\n        element.parentNode.replaceChild(newElement, element);\n        \n        newElement.addEventListener('click', async (e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          \n          console.log('Logout button clicked');\n          const originalText = newElement.textContent;\n          \n          try {\n            newElement.textContent = 'Logging out...';\n            newElement.disabled = true;\n            \n            const result = await this.logout();\n            console.log('Logout result:', result);\n            \n            window.location.href = CONFIG.ROUTES.LOGIN_PAGE;\n            \n          } catch (error) {\n            console.error('Logout error:', error);\n            newElement.textContent = originalText;\n            newElement.disabled = false;\n            window.location.href = CONFIG.ROUTES.LOGIN_PAGE;\n          }\n        });\n      });\n\n      console.log(`Setup ${logoutElements.length} logout handlers`);\n    }\n\n    isProtectedPage() {\n      if (typeof window === 'undefined') return false;\n      \n      return document.querySelector('[niko-data=\"auth-required\"]') !== null ||\n             document.querySelector('[data-auth=\"required\"]') !== null ||\n             window.location.pathname.includes('/dashboard') ||\n             window.location.pathname.includes('/dev/app/customer/') ||\n             window.location.pathname.includes('/dev/app/retailer/');\n    }\n\n    redirectToLogin() {\n      const loginUrl = window.location.origin + CONFIG.ROUTES.LOGIN_PAGE;\n      console.log('Redirecting to login:', loginUrl);\n      window.location.href = loginUrl;\n    }\n\n    // ============================================================================\n    // LEGACY COMPATIBILITY\n    // ============================================================================\n    isInitialized() {\n      return this.initialized;\n    }\n\n    getRedirectUrl(userType) {\n      return userType.toLowerCase() === 'retailer' \n        ? CONFIG.ROUTES.RETAILER_DASHBOARD \n        : CONFIG.ROUTES.CUSTOMER_DASHBOARD;\n    }\n  }\n\n  // ============================================================================\n  // AUTO-INITIALIZE\n  // ============================================================================\n  console.log('🏁 AUTO-INITIALIZE SECTION REACHED');\n  console.log('📄 Document readyState:', document.readyState);\n  console.log('🌐 Window location:', window.location.href);\n  \n  if (document.readyState === 'loading') {\n    console.log('⏳ Document still loading, waiting for DOMContentLoaded...');\n    document.addEventListener('DOMContentLoaded', () => {\n      console.log('🎬 DOMContentLoaded fired, creating NikoAuthCore...');\n      window.NikoAuthCore = new NikoAuthCore();\n      window.NikoAuth = window.NikoAuthCore; // Alias for compatibility\n      console.log('✅ window.NikoAuthCore created');\n      console.log('✅ window.NikoAuth alias created');\n    });\n  } else {\n    console.log('✨ Document ready, creating NikoAuthCore immediately...');\n    window.NikoAuthCore = new NikoAuthCore();\n    window.NikoAuth = window.NikoAuthCore; // Alias for compatibility\n    console.log('✅ window.NikoAuthCore created');\n    console.log('✅ window.NikoAuth alias created');\n  }\n\n  // Legacy global logout function\n  window.nikologout = async function() {\n    console.log('🚪 nikologout function called');\n    if (window.NikoAuthCore) {\n      await window.NikoAuthCore.logout();\n      window.location.href = CONFIG.ROUTES.LOGIN_PAGE;\n    } else {\n      console.error('❌ window.NikoAuthCore not found');\n    }\n  };\n  console.log('✅ nikologout function registered');\n\n  console.log('🎉 NikoAuth: Professional authentication system loaded v5.0.0');\n  console.log('🔍 You can test with: window.NikoAuthCore or window.NikoAuth');\n\n})(window);\n\n//# sourceURL=webpack://@nikobathrooms/pim-bundle/./src/auth-bundle-v5.js?\n}");

/***/ }),

/***/ "./src/auth-bundle.js":
/*!****************************!*\
  !*** ./src/auth-bundle.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n// Niko Auth Core - Main Authentication System v3.0.0 (Modular)\n(function(window){'use strict';const CONFIG={SUPABASE_URL:'https://bzjoxjqfpmjhbfijthpp.supabase.co',SUPABASE_ANON_KEY:'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ6am94anFmcG1qaGJmaWp0aHBwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3NjIyMzksImV4cCI6MjA3MTMzODIzOX0.sL9omeLIgpgqYjTJM6SGQPSvUvm5z-Yr9rOzkOi2mJk',ROUTES:{CUSTOMER_DASHBOARD:'/dev/app/customer/dashboard',RETAILER_DASHBOARD:'/dev/app/retailer/dashboard',LOGIN_PAGE:'/dev/app/auth/log-in'}};class NikoAuthCore{constructor(){this.supabase=null;this.initialized=false;this.init()}async init(){console.log('Loading Niko Auth Core v3.0.0 (Modular)');if(typeof supabase==='undefined'){await this.loadSupabase()}this.supabase=supabase.createClient(CONFIG.SUPABASE_URL,CONFIG.SUPABASE_ANON_KEY);this.initialized=true;console.log('Niko Auth Core initialized successfully');this.setupLogoutHandlers();this.checkAuthState()}isInitialized(){return this.initialized}loadSupabase(){return new Promise((resolve,reject)=>{const script=document.createElement('script');script.src='https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2';script.onload=resolve;script.onerror=reject;document.head.appendChild(script)})}async register(email,password,name,userType){console.log('Registering user:',{email,userType});if(!this.initialized){throw new Error('Authentication system not initialized')}try{const baseHref=document.querySelector('base')?.href||location.origin+'/';const redirectUrl=userType.toLowerCase()==='retailer'?baseHref+'dev/app/retailer/onboarding':baseHref+'dev/app/customer/onboarding';const{data,error}=await this.supabase.auth.signUp({email:email,password:password,options:{data:{name:name,user_type:userType.toLowerCase(),role:userType.toLowerCase()},emailRedirectTo:redirectUrl}});if(error){console.error('Registration error:',error);return{success:false,error:error.message}}console.log('Registration successful:',data.user?.email);await this.createWebflowRecord(data.user.id,email,name,userType);return{success:true,user:data.user}}catch(error){console.error('Registration failed:',error);return{success:false,error:error.message}}}async login(email,password){console.log('Logging in user:',{email});if(!this.initialized){throw new Error('Authentication system not initialized')}try{const{data,error}=await this.supabase.auth.signInWithPassword({email:email,password:password});if(error){console.error('Login error:',error);return{success:false,error:error.message}}console.log('Login successful:',data.user?.email);return{success:true,user:data.user}}catch(error){console.error('Login failed:',error);return{success:false,error:error.message}}}async logout(){console.log('Logging out user...');if(!this.initialized){throw new Error('Authentication system not initialized')}try{const{error}=await this.supabase.auth.signOut();localStorage.clear();sessionStorage.clear();if(error){console.error('Logout error:',error);return{success:false,error:error.message}}console.log('Logout successful');return{success:true}}catch(error){console.error('Logout failed:',error);return{success:false,error:error.message}}}async getCurrentUser(){if(!this.initialized)return null;try{const{data:{user},error}=await this.supabase.auth.getUser();if(error)throw error;return user}catch(error){console.error('Get user failed:',error);return null}}async isAuthenticated(){const user=await this.getCurrentUser();return!!user}async createWebflowRecord(userId,email,name,userType){try{const{data,error}=await this.supabase.functions.invoke('create-webflow-user',{body:{user_id:userId,email:email,name:name,user_type:userType}});if(error){console.warn('Webflow integration error (user still created in Supabase):',error)}else{console.log('Webflow CMS record created')}}catch(error){console.warn('Edge function error:',error)}}getRedirectUrl(userType){return userType.toLowerCase()==='retailer'?CONFIG.ROUTES.RETAILER_DASHBOARD:CONFIG.ROUTES.CUSTOMER_DASHBOARD}setupLogoutHandlers(){if(typeof document==='undefined')return;const logoutSelectors=['[niko-data=\"logout\"]','[data-logout]','.logout-btn','.logout-button','a[href*=\"logout\"]','button[onclick*=\"logout\"]'];const logoutElements=[];logoutSelectors.forEach(selector=>{document.querySelectorAll(selector).forEach(element=>{if(!logoutElements.includes(element)){logoutElements.push(element)}})});console.log(`Found ${logoutElements.length} logout elements`);logoutElements.forEach(element=>{const newElement=element.cloneNode(true);element.parentNode.replaceChild(newElement,element);newElement.addEventListener('click',async(e)=>{e.preventDefault();e.stopPropagation();console.log('Logout button clicked');const originalText=newElement.textContent;try{newElement.textContent='Logging out...';newElement.disabled=true;const result=await this.logout();console.log('Logout result:',result);window.location.href=CONFIG.ROUTES.LOGIN_PAGE}catch(error){console.error('Logout error:',error);newElement.textContent=originalText;newElement.disabled=false;window.location.href=CONFIG.ROUTES.LOGIN_PAGE}})});console.log(`Setup ${logoutElements.length} logout handlers`)}async checkAuthState(){if(typeof document==='undefined')return;try{const user=await this.getCurrentUser();if(user){this.displayUserInfo(user);console.log('User authenticated:',user.email)}else if(this.isProtectedPage()){console.log('No user found on protected page, redirecting...');window.location.href=CONFIG.ROUTES.LOGIN_PAGE}}catch(error){console.error('Auth state check failed:',error)}}displayUserInfo(user){if(typeof document==='undefined')return;const userName=user.user_metadata?.name||user.email.split('@')[0];const userRole=user.user_metadata?.user_type||'customer';const userSelectors={name:['[data-user=\"name\"]','[niko-data=\"user-name\"]','.user-name','#user-name'],email:['[data-user=\"email\"]','[niko-data=\"user-email\"]','.user-email','#user-email'],role:['[data-user=\"role\"]','[niko-data=\"user-role\"]','.user-role','#user-role']};userSelectors.name.forEach(selector=>{document.querySelectorAll(selector).forEach(el=>el.textContent=userName)});userSelectors.email.forEach(selector=>{document.querySelectorAll(selector).forEach(el=>el.textContent=user.email)});userSelectors.role.forEach(selector=>{document.querySelectorAll(selector).forEach(el=>el.textContent=userRole)});console.log('User info displayed')}isProtectedPage(){if(typeof window==='undefined')return false;const protectedPaths=['/dev/app/customer/','/dev/app/retailer/','/dashboard','/profile'];return protectedPaths.some(path=>window.location.pathname.includes(path))}}window.NikoAuthCore=new NikoAuthCore();window.NikoAuth=window.NikoAuthCore;window.nikologout=async function(){if(window.NikoAuthCore){await window.NikoAuthCore.logout();window.location.href=CONFIG.ROUTES.LOGIN_PAGE}}})(window);\n\n//# sourceURL=webpack://@nikobathrooms/pim-bundle/./src/auth-bundle.js?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/auth-bundle.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/auth-bundle-v5.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;